// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/doctor.dart';
import 'domain/models/patient.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8980609890120061262),
    name: 'Address',
    lastPropertyId: const obx_int.IdUid(6, 8371190669448837307),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 417235786855782886),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 511330209915942008),
        name: 'town',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9142197519374603811),
        name: 'city',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4932181361632400920),
        name: 'province',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 9045478344759115485),
        name: 'country',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8371190669448837307),
        name: 'patientId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 2203856357145349131),
        relationTarget: 'Patient',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3253599957202435074),
    name: 'Contact',
    lastPropertyId: const obx_int.IdUid(5, 8891026483337949892),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7888947001963051591),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6874555312804395192),
        name: 'countryCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8871677546577658469),
        name: 'mnp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3895837602319741424),
        name: 'phoneCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8891026483337949892),
        name: 'patientId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 8195087619069868320),
        relationTarget: 'Patient',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6908327120484981057),
    name: 'Imagery',
    lastPropertyId: const obx_int.IdUid(3, 5609663734279836144),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 50680220251366275),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2963530678687840041),
        name: 'path',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5609663734279836144),
        name: 'patientId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 2468534822973730078),
        relationTarget: 'Patient',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 7031229979224591978),
    name: 'Lesion',
    lastPropertyId: const obx_int.IdUid(3, 1971841601747006191),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1473673149529889666),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2809150687386814021),
        name: 'patterns',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1971841601747006191),
        name: 'patientId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 1181806279337494171),
        relationTarget: 'Patient',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 2378356106752531449),
    name: 'Patient',
    lastPropertyId: const obx_int.IdUid(14, 6977888134205339333),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 364922943569356621),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2286911465415636794),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5632613633260663388),
        name: 'gender',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3734006638439819251),
        name: 'editing',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3391063805521164409),
        name: 'addressId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 9044445346708171195),
        relationTarget: 'Address',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8788308990978172749),
        name: 'dateOfBirth',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1897619535856809579),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 4464186779726439750),
        relationTarget: 'Contact',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6377572202195958167),
        name: 'diagnosis',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5971415717477938348),
        name: 'complaints',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3200192656421899366),
        name: 'management',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 9041268837318802412),
        name: 'presentation',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4304149839896931907),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6977888134205339333),
        name: 'password',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 5078272849828177414),
        name: 'images',
        targetId: const obx_int.IdUid(3, 6908327120484981057),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'lesions',
        srcEntity: 'Lesion',
        srcField: 'patient',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 8506329981354527466),
    name: 'Doctor',
    lastPropertyId: const obx_int.IdUid(5, 571613808541856841),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9005446797232743686),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1412724240795019578),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 573392162338141359),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2149571582222653003),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 571613808541856841),
        name: 'password',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 327558703705523544),
        name: 'patients',
        targetId: const obx_int.IdUid(5, 2378356106752531449),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 8506329981354527466),
    lastIndexId: const obx_int.IdUid(6, 1181806279337494171),
    lastRelationId: const obx_int.IdUid(3, 327558703705523544),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [3741680126045197156, 4198663862409328915],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      234506518151675899,
      4570769223366660505,
      6918021612932522231,
      4508135288471986369,
      5768344203936922640,
      5176294321627453630,
      2834154999074975135,
      4736505574545836613,
      3925291398425468117,
      7145787198261058332,
      591482636131160776,
      5369529862713653024,
      5787556164475731774,
      401909219337096798,
      1933040886521569679,
      6750599316349042668,
      3067600840751836998,
    ],
    retiredRelationUids: const [4372088283872831827],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Address: obx_int.EntityDefinition<Address>(
      model: _entities[0],
      toOneRelations: (Address object) => [object.patient],
      toManyRelations: (Address object) => {},
      getId: (Address object) => object.id,
      setId: (Address object, int id) {
        object.id = id;
      },
      objectToFB: (Address object, fb.Builder fbb) {
        final townOffset = fbb.writeString(object.town);
        final cityOffset = fbb.writeString(object.city);
        final provinceOffset = fbb.writeString(object.province);
        final countryOffset = fbb.writeString(object.country);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, townOffset);
        fbb.addOffset(2, cityOffset);
        fbb.addOffset(3, provinceOffset);
        fbb.addOffset(4, countryOffset);
        fbb.addInt64(5, object.patient.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Address()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..town = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..city = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..province = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '')
          ..country = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 12, '');
        object.patient.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.patient.attach(store);
        return object;
      },
    ),
    Contact: obx_int.EntityDefinition<Contact>(
      model: _entities[1],
      toOneRelations: (Contact object) => [object.patient],
      toManyRelations: (Contact object) => {},
      getId: (Contact object) => object.id,
      setId: (Contact object, int id) {
        object.id = id;
      },
      objectToFB: (Contact object, fb.Builder fbb) {
        final countryCodeOffset = fbb.writeString(object.countryCode);
        final mnpOffset = fbb.writeString(object.mnp);
        final phoneCodeOffset = fbb.writeString(object.phoneCode);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, countryCodeOffset);
        fbb.addOffset(2, mnpOffset);
        fbb.addOffset(3, phoneCodeOffset);
        fbb.addInt64(4, object.patient.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Contact()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..countryCode = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..mnp = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..phoneCode = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '');
        object.patient.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.patient.attach(store);
        return object;
      },
    ),
    Imagery: obx_int.EntityDefinition<Imagery>(
      model: _entities[2],
      toOneRelations: (Imagery object) => [object.patient],
      toManyRelations: (Imagery object) => {},
      getId: (Imagery object) => object.id,
      setId: (Imagery object, int id) {
        object.id = id;
      },
      objectToFB: (Imagery object, fb.Builder fbb) {
        final pathOffset = fbb.writeString(object.path);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, pathOffset);
        fbb.addInt64(2, object.patient.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Imagery()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..path = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '');
        object.patient.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.patient.attach(store);
        return object;
      },
    ),
    Lesion: obx_int.EntityDefinition<Lesion>(
      model: _entities[3],
      toOneRelations: (Lesion object) => [object.patient],
      toManyRelations: (Lesion object) => {},
      getId: (Lesion object) => object.id,
      setId: (Lesion object, int id) {
        object.id = id;
      },
      objectToFB: (Lesion object, fb.Builder fbb) {
        final patternsOffset = fbb.writeString(object.patterns);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, patternsOffset);
        fbb.addInt64(2, object.patient.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Lesion()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..patterns = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '');
        object.patient.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.patient.attach(store);
        return object;
      },
    ),
    Patient: obx_int.EntityDefinition<Patient>(
      model: _entities[4],
      toOneRelations: (Patient object) => [object.address, object.contact],
      toManyRelations: (Patient object) => {
        obx_int.RelInfo<Patient>.toMany(2, object.id): object.images,
        obx_int.RelInfo<Lesion>.toOneBacklink(
          3,
          object.id,
          (Lesion srcObject) => srcObject.patient,
        ): object.lesions,
      },
      getId: (Patient object) => object.id,
      setId: (Patient object, int id) {
        object.id = id;
      },
      objectToFB: (Patient object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final diagnosisOffset = fbb.writeString(object.diagnosis);
        final complaintsOffset = fbb.writeString(object.complaints);
        final managementOffset = fbb.writeString(object.management);
        final emailOffset = fbb.writeString(object.email);
        final passwordOffset = fbb.writeString(object.password);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.gender);
        fbb.addBool(3, object.editing);
        fbb.addInt64(4, object.address.targetId);
        fbb.addInt64(5, object.dateOfBirth?.millisecondsSinceEpoch);
        fbb.addInt64(6, object.contact.targetId);
        fbb.addOffset(7, diagnosisOffset);
        fbb.addOffset(8, complaintsOffset);
        fbb.addOffset(9, managementOffset);
        fbb.addInt64(10, object.presentation?.millisecondsSinceEpoch);
        fbb.addOffset(12, emailOffset);
        fbb.addOffset(13, passwordOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateOfBirthValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final presentationValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final object = Patient()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..gender = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            8,
            false,
          )
          ..editing = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            10,
            false,
          )
          ..dateOfBirth = dateOfBirthValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateOfBirthValue)
          ..diagnosis = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 18, '')
          ..complaints = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 20, '')
          ..management = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 22, '')
          ..presentation = presentationValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(presentationValue)
          ..email = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 28, '')
          ..password = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 30, '');
        object.address.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.address.attach(store);
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.contact.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Patient>(
          object.images,
          store,
          obx_int.RelInfo<Patient>.toMany(2, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Patient>(
          object.lesions,
          store,
          obx_int.RelInfo<Lesion>.toOneBacklink(
            3,
            object.id,
            (Lesion srcObject) => srcObject.patient,
          ),
        );
        return object;
      },
    ),
    Doctor: obx_int.EntityDefinition<Doctor>(
      model: _entities[5],
      toOneRelations: (Doctor object) => [],
      toManyRelations: (Doctor object) => {
        obx_int.RelInfo<Doctor>.toMany(3, object.id): object.patients,
      },
      getId: (Doctor object) => object.id,
      setId: (Doctor object, int id) {
        object.id = id;
      },
      objectToFB: (Doctor object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        final emailOffset = fbb.writeString(object.email);
        final passwordOffset = fbb.writeString(object.password);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addOffset(3, emailOffset);
        fbb.addOffset(4, passwordOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Doctor()
          ..id = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            4,
          )!
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..description = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..email = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '')
          ..password = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 12, '');
        obx_int.InternalToManyAccess.setRelInfo<Doctor>(
          object.patients,
          store,
          obx_int.RelInfo<Doctor>.toMany(3, object.id),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// See [Address.id].
  static final id = obx.QueryIntegerProperty<Address>(
    _entities[0].properties[0],
  );

  /// See [Address.town].
  static final town = obx.QueryStringProperty<Address>(
    _entities[0].properties[1],
  );

  /// See [Address.city].
  static final city = obx.QueryStringProperty<Address>(
    _entities[0].properties[2],
  );

  /// See [Address.province].
  static final province = obx.QueryStringProperty<Address>(
    _entities[0].properties[3],
  );

  /// See [Address.country].
  static final country = obx.QueryStringProperty<Address>(
    _entities[0].properties[4],
  );

  /// See [Address.patient].
  static final patient = obx.QueryRelationToOne<Address, Patient>(
    _entities[0].properties[5],
  );
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id = obx.QueryIntegerProperty<Contact>(
    _entities[1].properties[0],
  );

  /// See [Contact.countryCode].
  static final countryCode = obx.QueryStringProperty<Contact>(
    _entities[1].properties[1],
  );

  /// See [Contact.mnp].
  static final mnp = obx.QueryStringProperty<Contact>(
    _entities[1].properties[2],
  );

  /// See [Contact.phoneCode].
  static final phoneCode = obx.QueryStringProperty<Contact>(
    _entities[1].properties[3],
  );

  /// See [Contact.patient].
  static final patient = obx.QueryRelationToOne<Contact, Patient>(
    _entities[1].properties[4],
  );
}

/// [Imagery] entity fields to define ObjectBox queries.
class Imagery_ {
  /// See [Imagery.id].
  static final id = obx.QueryIntegerProperty<Imagery>(
    _entities[2].properties[0],
  );

  /// See [Imagery.path].
  static final path = obx.QueryStringProperty<Imagery>(
    _entities[2].properties[1],
  );

  /// See [Imagery.patient].
  static final patient = obx.QueryRelationToOne<Imagery, Patient>(
    _entities[2].properties[2],
  );
}

/// [Lesion] entity fields to define ObjectBox queries.
class Lesion_ {
  /// See [Lesion.id].
  static final id = obx.QueryIntegerProperty<Lesion>(
    _entities[3].properties[0],
  );

  /// See [Lesion.patterns].
  static final patterns = obx.QueryStringProperty<Lesion>(
    _entities[3].properties[1],
  );

  /// See [Lesion.patient].
  static final patient = obx.QueryRelationToOne<Lesion, Patient>(
    _entities[3].properties[2],
  );
}

/// [Patient] entity fields to define ObjectBox queries.
class Patient_ {
  /// See [Patient.id].
  static final id = obx.QueryIntegerProperty<Patient>(
    _entities[4].properties[0],
  );

  /// See [Patient.name].
  static final name = obx.QueryStringProperty<Patient>(
    _entities[4].properties[1],
  );

  /// See [Patient.gender].
  static final gender = obx.QueryBooleanProperty<Patient>(
    _entities[4].properties[2],
  );

  /// See [Patient.editing].
  static final editing = obx.QueryBooleanProperty<Patient>(
    _entities[4].properties[3],
  );

  /// See [Patient.address].
  static final address = obx.QueryRelationToOne<Patient, Address>(
    _entities[4].properties[4],
  );

  /// See [Patient.dateOfBirth].
  static final dateOfBirth = obx.QueryDateProperty<Patient>(
    _entities[4].properties[5],
  );

  /// See [Patient.contact].
  static final contact = obx.QueryRelationToOne<Patient, Contact>(
    _entities[4].properties[6],
  );

  /// See [Patient.diagnosis].
  static final diagnosis = obx.QueryStringProperty<Patient>(
    _entities[4].properties[7],
  );

  /// See [Patient.complaints].
  static final complaints = obx.QueryStringProperty<Patient>(
    _entities[4].properties[8],
  );

  /// See [Patient.management].
  static final management = obx.QueryStringProperty<Patient>(
    _entities[4].properties[9],
  );

  /// See [Patient.presentation].
  static final presentation = obx.QueryDateProperty<Patient>(
    _entities[4].properties[10],
  );

  /// See [Patient.email].
  static final email = obx.QueryStringProperty<Patient>(
    _entities[4].properties[11],
  );

  /// See [Patient.password].
  static final password = obx.QueryStringProperty<Patient>(
    _entities[4].properties[12],
  );

  /// see [Patient.images]
  static final images = obx.QueryRelationToMany<Patient, Imagery>(
    _entities[4].relations[0],
  );

  /// see [Patient.lesions]
  static final lesions = obx.QueryBacklinkToMany<Lesion, Patient>(
    Lesion_.patient,
  );
}

/// [Doctor] entity fields to define ObjectBox queries.
class Doctor_ {
  /// See [Doctor.id].
  static final id = obx.QueryIntegerProperty<Doctor>(
    _entities[5].properties[0],
  );

  /// See [Doctor.name].
  static final name = obx.QueryStringProperty<Doctor>(
    _entities[5].properties[1],
  );

  /// See [Doctor.description].
  static final description = obx.QueryStringProperty<Doctor>(
    _entities[5].properties[2],
  );

  /// See [Doctor.email].
  static final email = obx.QueryStringProperty<Doctor>(
    _entities[5].properties[3],
  );

  /// See [Doctor.password].
  static final password = obx.QueryStringProperty<Doctor>(
    _entities[5].properties[4],
  );

  /// see [Doctor.patients]
  static final patients = obx.QueryRelationToMany<Doctor, Patient>(
    _entities[5].relations[0],
  );
}
